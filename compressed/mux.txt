Design.sv


module mux(
    input 	      clk	,
    input 	      reset,
    input      a	,
    input      b	,
    input      c ,
    input      d ,
    input                valid,
    input [1:0] sel,
    output reg out 
); 
    
    
    //Reset 
    always @(posedge reset) 
        out <= 0;
      
    // mux operation
    always @(posedge clk) begin
        if (valid) begin
            case(sel)
              2'b00:out <= a;
              2'b01:out <= b;
              2'b10:out <= c;
              2'b11:out <= d;
            endcase
        end
    end
endmodule


Testbench.sv


`include "interface.sv"

`include "directed_test.sv"


module tbench_top;
    
    //clock and reset signal declaration
    bit clk;
    bit reset;
    
    //clock generation
    always #5 clk = ~clk;
    
    //reset Generation
    initial begin
        reset = 1;
        #5 reset =0;
    end
    

    intf i_intf(clk,reset);
    

    test t1(i_intf);
    

    mux DUT (
        .clk(i_intf.clk),
        .reset(i_intf.reset),
        .a(i_intf.a),
        .b(i_intf.b),
        .c(i_intf.c),
        .d(i_intf.d),
        .sel(i_intf.sel),
        .valid(i_intf.valid),
        .out(i_intf.out)
      );
    initial begin 
        $dumpfile("dump.vcd"); $dumpvars;
    end
endmodule


Transaction.sv

class transaction;
    
    //declaring the transaction items
    rand bit    a;
    rand bit    b;
    rand bit    c;
    rand bit    d;
    rand bit    [1:0] sel;
              bit    out;
    function void display(string name);
        $display("-------------------------");
        $display("- %s ",name);
        $display("-------------------------");
        $display("- a = %0d, b = %0d, c = %0d, d = %0d , sel = %0b",a,b,c,d,sel);
        $display("- out = %0d",out);
        $display("-------------------------");
    endfunction
endclass



Grenrator


class generator;
    
    //declaring transaction class 
    rand transaction trans;
    
    //repeat count, to specify number of items to generate
    int    repeat_count;

    mailbox gen2driv;
    event ended;
    
    //constructor
    function new(mailbox gen2driv);

        this.gen2driv = gen2driv;
    endfunction

    task main();
        repeat(repeat_count) begin
        trans = new();
        if( !trans.randomize() ) $fatal("Gen:: trans randomization failed");
            trans.display("[ Generator ]");
            gen2driv.put(trans);
        end
        -> ended; //triggering indicatesthe end of generation
    endtask
    
endclass



Driver





class driver;
    int no_transactions;
    virtual intf vif;
    mailbox gen2driv;
    function new(virtual intf vif,mailbox gen2driv);
        this.vif = vif;
        this.gen2driv = gen2driv;
    endfunction
    task reset;
        wait(vif.reset);
        $display("[ DRIVER ] ----- Reset Started -----");
        vif.a <= 0;
        vif.b <= 0;
        vif.c <= 0;
        vif.d <= 0;
        vif.valid <= 0;
        vif.sel <= 0;
        wait(!vif.reset);
        $display("[ DRIVER ] ----- Reset Ended      -----");
    endtask
    

    task main;
        forever begin
            transaction trans;
            gen2driv.get(trans);
            @(posedge vif.clk);
            vif.valid <= 1;
            vif.a          <= trans.a;
            vif.b          <= trans.b;
            vif.c          <= trans.c;
            vif.d          <= trans.d;
            vif.sel          <= trans.sel;

            @(posedge vif.clk);
            vif.valid <= 0;
            trans.out      = vif.out;
            @(posedge vif.clk);
            trans.display("[ Driver ]");
            no_transactions++;
        end
    endtask
    
endclass


environment.sv

`include "transaction.sv"
`include "generator.sv"
`include "driver.sv"
`include "monitor.sv"
`include "scoreboard.sv"
class environment;
    
    //generator and driver instance
    generator 	gen;
    driver        	driv;
    monitor      	mon;
    scoreboard	scb;
    
    //mailbox handle's
    mailbox gen2driv;
    mailbox mon2scb;
    
    //virtual interface
    virtual intf vif;
    
    //constructor
    function new(virtual intf vif);
        //get the interface from test
        this.vif = vif;
        
        //creating the mailbox (Same handle will be shared across generator and driver)
        gen2driv = new();
        mon2scb    = new();
        
        //creating generator and driver
        gen    = new(gen2driv);
        driv = new(vif,gen2driv);
        mon    = new(vif,mon2scb);
        scb    = new(mon2scb);
    endfunction
    
    //
    task pre_test();
        driv.reset();
    endtask
    
    task test();
        fork 
            gen.main();
            driv.main();
            mon.main();
            scb.main();
        join_any
    endtask
    
    task post_test();
        wait(gen.ended.triggered);
        wait(gen.repeat_count == driv.no_transactions); //Optional
        wait(gen.repeat_count == scb.no_transactions);
    endtask    
    
    //run task
    task run;
        pre_test();
        test();
        post_test();
        $finish;
    endtask
    
endclass


Random_test.sv


`include "environment.sv"
program test(intf i_intf);
    environment env;
    
    initial begin
        env = new(i_intf);
        env.gen.repeat_count = 4;
        env.run();
    end
endprogram


Interface.sv

interface intf(input logic clk,reset);
    
    //declaring the signals
    logic              valid;
    logic    a;
    logic    b;
    logic    c;
    logic    d;
    logic    out;
    logic    [1:0] sel;
    
endinterface


directed_test.sv

`include "environment.sv"
program test(intf i_intf);
    
    class my_trans extends transaction;
        
        bit [1:0] count;
        
        function void pre_randomize();
            a.rand_mode(0);
            b.rand_mode(0);
            c.rand_mode(0);
            d.rand_mode(0);
            sel.rand_mode(0);

            a = 1;
            b = 0;
            c = 1;
            d = 0;
            sel=2'b10;
        endfunction
        
    endclass
        
    //declaring environment instance
    environment env;
    my_trans my_tr;
    
    initial begin
        //creating environment
        env = new(i_intf);
        
        my_tr = new();
        
        //setting the repeat count of generator as 4, means to generate 4 packets
        env.gen.repeat_count = 10;
        
        env.gen.trans = my_tr;
        
        //calling run of env, it interns calls generator and driver main tasks.
        env.run();
    end
endprogram


monitor.sv


//Samples the interface signals, captures into transaction packet and send the packet to scoreboard.

class monitor;
    
    //creating virtual interface handle
    virtual intf vif;
    
    //creating mailbox handle
    mailbox mon2scb;
    
    //constructor
    function new(virtual intf vif,mailbox mon2scb);
        //getting the interface
        this.vif = vif;
        //getting the mailbox handles from    environment 
        this.mon2scb = mon2scb;
    endfunction
    
    //Samples the interface signal and send the sample packet to scoreboard
    task main;
        forever begin
            transaction trans;
            trans = new();
            @(posedge vif.clk);
            wait(vif.valid);
            trans.a      = vif.a;
            trans.b      = vif.b;
            trans.c      = vif.c;
            trans.d      = vif.d;
            trans.sel = vif.sel;
            @(posedge vif.clk);
            trans.out      = vif.out;
            @(posedge vif.clk);
            mon2scb.put(trans);
            trans.display("[ Monitor ]");
        end
    endtask
    
endclass


scoreboard.sv


class scoreboard;
      
    //creating mailbox handle
    mailbox mon2scb;
    
    //used to count the number of transactions
    int no_transactions;
    
    //constructor
    function new(mailbox mon2scb);
        //getting the mailbox handles from    environment 
        this.mon2scb = mon2scb;
    endfunction
    
    //Compares the Actual result with the expected result
    task main;
        transaction trans;
        forever begin
            mon2scb.get(trans);
            if((~trans.sel[0]&~trans.sel[1]&trans.a)|(trans.sel[0]&~trans.sel[1]&trans.b)|(~trans.sel[0]&trans.sel[1]&trans.c)|(trans.sel[0]&trans.sel[1]&trans.d) == trans.out)
                    $display("Result is as Expected");
                else
                    $error("Wrong Result.\n\tExpeced: %0d Actual: %0d",(~trans.sel[0]&~trans.sel[1]&trans.a)|(trans.sel[0]&~trans.sel[1]&trans.b)|(~trans.sel[0]&trans.sel[1]&trans.c)|(trans.sel[0]&trans.sel[1]&trans.d),trans.out);
                no_transactions++;
            trans.display("[ Scoreboard ]");
        end
    endtask
    
endclass
